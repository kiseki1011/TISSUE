plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id 'checkstyle'
}

group = 'com.uranus'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

checkstyle {
    maxWarnings = 0
    configFile = file("${rootDir}/config/checkstyle/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "${rootDir}/config/checkstyle/naver-checkstyle-suppressions.xml"]
    toolVersion = "10.18.0"
    ignoreFailures = true // pass build even if checkstyle validation fails
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "com.uranus/taskmanager/api/domain/**",
                            "**/*Application*",
                            "**/*Request*",
                            "**/*Response*",
                            "**/*Exception*",
                            "**/*Base62Encoder*",
                            "**/*WorkspaceCodeGenerator*"
                    ])
                })
        )
        finalizedBy(jacocoTestCoverageVerification)
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                enabled = true
                element = 'CLASS'

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.80
                }

                excludes = [
                        "com.uranus.taskmanager.api.domain.**",
                        "**.*Application*",
                        "**.*Request*",
                        "**.*Response*",
                        "**.*Exception*",
                        "**.*Key*",
                        "**.*Base62Encoder*",
                        "**.*WorkspaceCodeGenerator*"
                ]
            }
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.security:spring-security-crypto'

        compileOnly 'org.projectlombok:lombok'
        runtimeOnly 'com.h2database:h2'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.rest-assured:rest-assured:5.1.1'

        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testCompileOnly 'org.projectlombok:lombok:1.18.34'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
    }

    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    tasks.named('jacocoTestReport') {
        dependsOn 'test'
        dependsOn 'compileJava'
    }
}